import OemCveModel from '../model/oemCveSchema.js';
import axios from "axios";
import OemListModel from '../model/oemListSchema.js';
export const runOemCveScheduler = async (request, response) => {


  var dateTime = new Date();
  var month = dateTime.getMonth() + 1;
  let date = ("0" + dateTime.getDate()).slice(-2);
  var year = dateTime.getFullYear();

  var ppubSttartDate = year + "-" + month + "-" + date + "T00:00:00.000";
  var pubEndDate = year + "-" + month + "-" + date + "T23:59:59.000";
  const onemList = await OemListModel.find({});
  for (const oem of onemList) {
    //let OemList =['Solarwinds','cisco','dell','mircosoft','f5','Fortinet','Aruba','HPE','Alcatel-Lucent'];
    //for(var i=0;i<=OemList.length;i++){
    let url = `https://services.nvd.nist.gov/rest/json/cves/2.0/?keywordSearch=${oem.oemName}&pubStartDate=${ppubSttartDate}&pubEndDate=${pubEndDate}`;
    axios.get(
      url,
      { headers: { 'apikey': '2d3a2cf2-1934-4620-bce2-f69b9e5dfb43' } })


      .then(response => {
        console.log("*******");
        console.log("*******" + response.data);
        //  let cveDetails = JSON.parse(response.body);
        let cveDetails = response.data;
        for (var i = 0; i < cveDetails.vulnerabilities.length; i++) {

          let saveCveData = {
            cveId: cveDetails.vulnerabilities[i].cve.id, oemName: oem.oemName,
            cveDetails: cveDetails.vulnerabilities[i]
          };
          OemCveModel.create(saveCveData);
        }

      }).catch(error => console.log(error))
  }

};



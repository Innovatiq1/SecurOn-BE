import vendorProductCveModel from '../model/vendorProductCveSchema.js';
import OemModel from '../model/vendorProductCveSchema.js';
import OemCpeModel from '../model/oemProductsSchema.js';
import OemListModel from '../model/oemListSchema.js';
import axios from "axios";

export const RunCveMappingScheduler = async (request, response) => {
    try {


        const onemList = await OemListModel.find({  });
            
        for (const oem of onemList) {

            const productList = await OemCpeModel.find({ oemName: oem.oemName });
            for (const product of productList) {
                let url = `https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${product.cpeName}`;

                axios.get(
                    url,
                    { headers: { 'apikey': '2d3a2cf2-1934-4620-bce2-f69b9e5dfb43' } })

                    .then(response => {

                        let cveDetails = response.data;

                        // for (var i = 0; i < cveDetails.vulnerabilities.length; i++) {


                        //         let saveData = {"vendorName":product.oemName,"productName":product.title,
                        //         date:cveDetails.vulnerabilities[i].cve.published,"fix":"N",
                        //         "cveId":cveDetails.vulnerabilities[i].cve.id,"cveDetails":cveDetails.vulnerabilities[i]};
                        //             vendorProductCveModel.create(saveData);

                        //  }

                        
                        cveDetails.vulnerabilities.forEach(async (cveData) => {



                            let cve = await vendorProductCveModel.findOne({ "cveId": cveData.cve.id,
                             "vendorName":oem.oemName,"productName":product.title,"version":product.version});

                            if (cve) {
                               
                                console.log("cveId already exists");
                            }
                            else {



                                const metrcis = cveData.cve.metrics;
                                let severity = "";

                                let cveDataCopy = { ...cveData.cveDetails };

                                if (Object.keys(metrcis).length > 0) {


                                    const filteredMetrics = [];
                                    Object.keys(metrcis).forEach((key) => {
                                        const sortedMetrics = metrcis[key].sort((a, b) => (a.cvssData.baseScore < b.cvssData.baseScore) ? 1 : a.cvssData.baseScore > b.cvssData.baseScore ? -1 : 0);
                                        filteredMetrics.push(sortedMetrics[0])
                                    })

                                    const priorityMetric = filteredMetrics.sort((a, b) => (a.cvssData.baseScore < b.cvssData.baseScore) ? 1 : a.cvssData.baseScore > b.cvssData.baseScore ? -1 : 0)[0];

                                    cveDataCopy = {
                                        ...cveDataCopy,
                                        metrics: {
                                            [Object.keys(metrcis)[0]]: [{ ...priorityMetric }]
                                        }
                                    }
                                    severity = priorityMetric.cvssData.baseSeverity ?? priorityMetric.baseSeverity

                                    //  let cve = await vendorProductCveModel.findOne({"cveId":cveData.cve.id});

                                    // if(cve){
                                    //     console.log("cveId already exists");
                                    // }else{
                                    let dateVal = cveData.cve.published;
                                    let monthYear = dateVal.split("-", 2);
                                    let month = monthYear[1];
                                    let year = monthYear[0];
                                    let saveData = {
                                        "vendorName": product.oemName, "productName": product.title,"month": month,"year":year,
                                        date: cveData.cve.published, "fix": "N", seviarity: severity,
                                        "cveId": cveData.cve.id, "cveDetails": cveData,version:product.version
                                    };
                                    vendorProductCveModel.create(saveData);
                                    //}
                                } else {

                                    // let cve = await vendorProductCveModel.findOne({"cveId":cveData.cve.id});

                                    // if(cve){
                                    //     console.log("cveId already exists");
                                    // }else{
                                        let dateVal = cveData.cve.published;
                                        let monthYear = dateVal.split("-", 2);
                                        let month = monthYear[1];
                                        let year = monthYear[0];

                                    let saveData = {
                                        "vendorName": product.oemName, "productName": product.title,"month": month,"year":year,
                                        date: cveData.cve.published, "fix": "N", seviarity: severity,
                                        "cveId": cveData.cve.id, "cveDetails": cveData,version:product.version
                                    };
                                    vendorProductCveModel.create(saveData);
                                    //}

                                }
                            }
                        });



                    }).catch(error => console.log(error))
            }
        }






    } catch (error) {

    }
};


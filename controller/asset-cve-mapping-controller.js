import InventoryModel from '../model/inventorySchema.js';
import vendorProductCveModel from '../model/vendorProductCveSchema.js';


export const RunAssetCveMappingScheduler = async (request, response) => {
    try {

        const assets = await InventoryModel.find({});
    //    const assets =  await InventoryModel.find({"vendor":"Cisco"});
        let assetsCount = assets.length;
        let count = 0;
        let oemList = ["Fortinet", "F5", "Solarwinds", "Microsoft"];

        for (const asset of assets) {

            count = count + 1;
            let result;
            let prod = asset.partNo;
            if (!oemList.includes(asset.vendor)) {
              
                let osType = asset.osType;
            
                result = await vendorProductCveModel.find({ "osType": osType, "productName": prod.toLowerCase(), "version": asset.firmwareVersion });
                // if (result.length == 0) {

                //     result = await vendorProductCveModel.find({ "osType": osType, "version": asset.firmwareVersion });
                // }
                
            } else {
             
                if (prod) {
                    if (asset.firmwareVersion == null || asset.firmwareVersion == '-') {
                        result = await vendorProductCveModel.find({ "productName": prod.toLowerCase(), "version": '-' });

                    }
                    else {
                        let firmVersion;
                        if (!asset.firmwareVersion.includes('.')) {

                            firmVersion = parseFloat(asset.firmwareVersion).toFixed(1);
                        } else {
                            firmVersion = asset.firmwareVersion;
                        }

                        result = await vendorProductCveModel.find({ "productName": prod.toLowerCase(), "version": firmVersion });

                        if (result.length == 0) {

                            let osType = asset.osType;
                            if (prod) {
                               
        
                                result = await vendorProductCveModel.find({ "osType": osType, "productName": prod.toLowerCase(), "version": asset.firmwareVersion });
                                if (result.length == 0) {
                                  
                                    result = await vendorProductCveModel.find({ "osType": osType, "version": asset.firmwareVersion });
                                }
                            }
        
                        }
                    }
                }



            }

            let unique_values = result
                .map((item) => item.cveId)
                .filter(
                    (value, index, current_value) => current_value.indexOf(value) === index
                );

            await InventoryModel.findByIdAndUpdate(asset._id, { vulnarabilities: unique_values.length });

            if (count == assetsCount) {
                response.send("scheduler run successfully");
            }
        }


    } catch (error) {

    }
};

export default RunAssetCveMappingScheduler;
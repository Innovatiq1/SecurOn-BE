import cveModel from '../model/cveSchema.js';
import axios from "axios";

export const RunCveScheduler = async () => {


  var dateTime = new Date();
  //var month = ("0" +(dateTime.getMonth() + 1)).slice(-2);
  var month = dateTime.getMonth() + 1;
  let date = ("0" + dateTime.getDate()).slice(-2);
  var year = dateTime.getFullYear();

  // var ppubSttartDate = 2023 + "-" + 10 + "-" + "0" + 1 + "T00:00:00.000";
  // var pubEndDate = year + "-" + month + "-" + date + "T23:59:59.000";


  var ppubSttartDate =year+"-"+month+"-"+date+"T00:00:00.000";
  var pubEndDate =year+"-"+month+"-"+date+"T23:59:59.000";
  const url = 'https://services.nvd.nist.gov/rest/json/cves/2.0/?pubStartDate='+ppubSttartDate+'&pubEndDate='+pubEndDate;
  
  
  axios.get(
    url,
    { headers: { 'apikey': '2d3a2cf2-1934-4620-bce2-f69b9e5dfb43' } })


    .then(response => {

      let cveDetails = response.data;
      //  for (var i = 0; i < cveDetails.vulnerabilities.length; i++) {

      //     console.log("data is date"+date +"month"+month +"year"+year+"year"+year+"cveDetails"+cveDetails.vulnerabilities[i]) ;
      //    let saveCveData = { date: cveDetails.vulnerabilities[i].cve.published,cveId: cveDetails.vulnerabilities[i].cve.id,cveDetails: cveDetails.vulnerabilities[i] };
      //    cveModel.create(saveCveData);
      //  }


      cveDetails.vulnerabilities.forEach((cveData) => {
        const metrcis = cveData.cve.metrics;
        let severity = "";

        let cveDataCopy = { ...cveData.cveDetails };

        if (Object.keys(metrcis).length > 0) {


          const filteredMetrics = [];
          Object.keys(metrcis).forEach((key) => {
            const sortedMetrics = metrcis[key].sort((a, b) => (a.cvssData.baseScore < b.cvssData.baseScore) ? 1 : a.cvssData.baseScore > b.cvssData.baseScore ? -1 : 0);
            filteredMetrics.push(sortedMetrics[0])
          })

          const priorityMetric = filteredMetrics.sort((a, b) => (a.cvssData.baseScore < b.cvssData.baseScore) ? 1 : a.cvssData.baseScore > b.cvssData.baseScore ? -1 : 0)[0];

          cveDataCopy = {
            ...cveDataCopy,
            metrics: {
              [Object.keys(metrcis)[0]]: [{ ...priorityMetric }]
            }
          }
          severity = priorityMetric.cvssData.baseSeverity ?? priorityMetric.baseSeverity
          let saveCveData = {
            date: cveData.cve.published, cveId: cveData.cve.id, cveDetails: cveData,
            seviarity: severity, month: month, year: year, fix: 'N'
          };
          cveModel.create(saveCveData);
        } else {
          let saveCveData = {
            date: cveData.cve.published, cveId: cveData.cve.id, cveDetails: cveData,
            seviarity: severity, month: month, year: year, fix: 'N'
          };
          cveModel.create(saveCveData);
        }

      });

    }).catch(error => console.log(error))
};

export default RunCveScheduler;
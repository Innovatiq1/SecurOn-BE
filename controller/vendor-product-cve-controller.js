import vendorProductCveModel from '../model/vendorProductCveSchema.js';


export const vendorSearch = async (request, response) => {
    try {

        let where = {
            vendorName: request.params.vendorName
        };

        // const vendorData = await vendorProductCveModel.find(where);
        const productCount = await db.vendorProductCveModel.distinct("productName", where).length;
        const cveCount = await db.vendorProductCveModel.count("cveId", where);
        let JsonData = { vendorName: request.params.vendorName, productCount: productCount, cveCount: cveCount };
        response.json(JsonData);

    } catch (error) {

    }
};


export const listOfProducts = async (request, response) => {
    try {


        let where = {
            vendorName: request.params.vendorName
        };

        const productList = await db.vendorProductCveModel.distinct("productName", where);
        let prodList = [];
        if (!productList) {

            for (const prodcut of productList) {
                let where = {
                    vendorName: request.params.vendorName,
                    productName: prodcut
                };
                const cveCount = await db.vendorProductCveModel.count("cveId", where)
                prodList.push({ vendorName: vendorName, productName: prodcut, cveCount: cveCount });
            }
        }

        response.json(prodList);

    } catch (error) {

    }
};

export const listOfVendorProductsCves = async (request, response) => {
    try {

        let where = {
            vendorName: request.params.vendorName,
            productName: request.params.productName
        };


        const cveList = await db.vendorProductCveModel.find(where);
        response.json(cveList);

    } catch (error) {

    }
};